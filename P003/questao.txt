1- Uma exceção é uma indicação de um problema que ocorre durante a execução de um programa. (DEITEL, 2005)
Utiliza-se as excessões para alertar o usuário do erro fazendo com que o mesmo trate da exceção, impedindo o interrompimento do programa.

2- Checked Exceptions: seguem a regra do handle-or-declare. O desenvolvedor é obrigado a tratar (try-catch) ou relançar (throws), caso não saiba como tratar.
Ex: IOException, FileNotFoundException, SQLException
Unchecked Exceptions: não é obrigatório tratar nem relançar, apesar de ser possível. Caso não haja try-catch adequado à exceção gerada, ela é automaticamente relançada. Geralmente são filhas de java.lang.RuntimeException direta ou indiretamente.
Ex: NullPointerException, ArithmeticException, IndexOutOfBoundException
(Fonte: https://www.alura.com.br/artigos/lidando-com-exceptions)

3- Pode-se tratar as exceções utilizando o bloco try/catch.
As palavras utilizadas no tratamento de exeções são: try, catch, finally, throw e throws.
Normalmente o programador observa o código e consegue prever o acontecimento de uma possível exceção, 
com isso, delimita a parte do código na qual ocorreria o erro, com o bloco try, a seguir temos o bloco catch,
que indica o modo como o programa deve seguir após aferir o erro. 
Também é possivel lançar uma exceção caso o programador perceba que o comportamento do programa induza a algum erro utilizando a palavra-chave throw.

4- O bloco try é usado para envolver o código que pode potencialmente lançar uma exceção. 
É aqui que você coloca o código que você acha que pode causar um problema. 
Por exemplo, se você está tentando abrir um arquivo que pode não existir, você colocaria esse código dentro de um bloco try.
O bloco catch é usado para capturar e lidar com a exceção se ela for lançada dentro do bloco try.
Você pode ter vários blocos catch para lidar com diferentes tipos de exceções. 
Cada bloco catch deve seguir imediatamente um bloco try ou outro bloco catch.
(Fonte: https://www.dio.me/articles/entendendo-o-try-e-catch-em-java)
É importante usá-los ao lidar com exceções pois permite que o erro seja contornado e o programa mantenha o fluxo.

5- É apropriado criar uma exceção personalizada quando a mesma prover algum benefício comparado com as exceções padrões de Java, 
quando opções não cobrem a sua necessidade ou quando deseja tratá-las de um jeito mais preciso.
Por exemplo quando um método precisa receber uma string com algum formato específico, pode utilizar a exceção personalizada para editar a string e retornar corretamente ou indicar o erro e repetir o processo com o usuário.